<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var commandDetailsList = GetCommandDetailsList();
    var eventDetailsList = GetEventDetailsList();
    var componentNamespace = qualifiedNamespace + "." + componentDetails.ComponentName;
    var profilingStart = $"Profiler.BeginSample(\"{componentDetails.ComponentName}\");";
    var profilingEnd = "Profiler.EndSample();";
#>
<#= generatedHeader #>

using System.Collections.Generic;
using Unity.Mathematics;
using Unity.Entities;
using Improbable.Gdk.Core;
using Improbable.Worker.CInterop;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        public class DiffComponentStorage : IDiffUpdateStorage<Update>
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>
            , IDiffEventStorage<<#= eventType #>>
<# } #>
        {
            EntityMessageDiffStorage<ComponentUpdateReceived<Update>> updateStorage =
                new EntityMessageDiffStorage<ComponentUpdateReceived<Update>>();
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>

            EntityMessageDiffStorage<ComponentEventReceived<<#= eventType #>>> <#= ev.CamelCaseEventName #>EventStorage =
                new EntityMessageDiffStorage<ComponentEventReceived<<#= eventType #>>>();
<# } #>

            public uint GetComponentId()
            {
                return ComponentId;
            }

            public void Clean()
            {
                updateStorage.Clean();
<# foreach (var ev in eventDetailsList) {#>

                <#= ev.CamelCaseEventName #>EventStorage.Clean();
<# } #>
            }

            public void AddUpdate(ComponentUpdateReceived<Update> update)
            {
                updateStorage.AddMessage(update);
            }

            public void GetUpdates(long entityId, ICollection<ComponentUpdateReceived<Update>> messageList)
            {
                updateStorage.GetMessages(entityId, messageList);
            }
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>

            void IDiffEventStorage<<#= eventType #>>.AddEvent(ComponentEventReceived<<#= eventType #>> ev)
            {
                <#= ev.CamelCaseEventName #>EventStorage.AddMessage(ev);
            }

            void IDiffEventStorage<<#= eventType #>>.GetEvents(long entityId, ICollection<ComponentEventReceived<<#= eventType #>>> messageList)
            {
                <#= ev.CamelCaseEventName #>EventStorage.GetMessages(entityId, messageList);
            }
<# } #>
        }
    }
}
